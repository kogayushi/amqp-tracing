import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.jetbrains.kotlin.jvm' version '1.8.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
}

group = 'kogayushi'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'

	// for m1 mac
	final String osName = java.util.Optional.ofNullable(System.getProperty("os.name")).orElse("")
	final String osArch = java.util.Optional.ofNullable(System.getProperty("os.arch")).orElse("")
	final String taskName = project.gradle.startParameter.getTaskNames().isEmpty()
			? ""
			: java.util.Optional.ofNullable(project.gradle.startParameter.getTaskNames().first()).orElse("")
	if (osName.startsWith("Mac OS X")
			&& osArch == "aarch64"
			&& !taskName.contains("bootBuildImage")
	) {
		implementation 'io.netty:netty-resolver-dns-native-macos::osx-aarch_64'
	}
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
